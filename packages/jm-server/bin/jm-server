#!/usr/bin/env node

'use strict'
const fs = require('fs')
const path = require('path')
const spawn = require('child_process').spawn
const argv = require('yargs')
  .alias('v', 'version')
  .alias('h', 'help')
  .alias('D', 'daemon')
  .argv

if (argv.v) {
  const pkg = require('../package.json')
  console.log('%s %s', pkg.name, pkg.version)
  process.exit(0)
}

if (argv.h || argv.help) {
  console.log([
    'usage: jm-server [path] [options]',
    '',
    'options:',
    '  -v --version Version info.',
    '  -c --config  config file.',
    '  -p --port    Port to use [3000]',
    '  -a --host    Address to use [0.0.0.0]',
    '  -f --prefix  Uri prefix []',
    '  -d --debug   Debug mode [false]',
    '  -t --trust_proxy  trust_proxy [false]',
    '  -l --lng     language [zh]',
    '  --production set NODE_ENV to production',
    '  --cluster    run in cluster mode',
    '  -D --daemon  run in the background',
    '',
    '  -U --utc     Use UTC time format in log messages.',
    '',
    '  -S --ssl     Enable https.',
    '  -C --cert    Path to ssl cert file (default: cert.pem).',
    '  -K --key     Path to ssl key file (default: key.pem).',
    '',
    '  -h --help    Print this list and exit.'
  ].join('\n'))
  process.exit(0)
}

let root = argv._[0]
if (root && !path.isAbsolute(root)) {
  root = path.join(process.cwd(), root)
}
root || (root = process.cwd())

let isProject = true
const pkgFile = path.join(root, '/package.json')
try {
  fs.accessSync(pkgFile, fs.constants.R_OK)
} catch (e) {
  isProject = false
}

if (isProject && !argv.nospawn) {
  const absScript = path.resolve(root, 'node_modules/jm-server/bin/jm-server')
  const params = process.argv.slice(1)
  params[0] = absScript
  params.push('--nospawn')

  if (argv.daemon) {
    const ls = spawn(process.execPath, params, { detached: true, stdio: 'ignore' })
    ls.unref()
    process.exit(0)
  } else {
    const ls = spawn(process.execPath, params)
    ls.stdout.on('data', function (data) {
      console.log(data.toString())
    })
    ls.stderr.on('data', function (data) {
      console.log(data.toString())
    })
  }
} else {
  const bCluster = argv.cluster || process.env.cluster
  if (bCluster) {
    require('./cluster')
  } else {
    require('./app')
  }
}
